plugins {
    id 'eclipse'
    id 'java-gradle-plugin'
    id 'maven-publish' // used for publishing to local maven repository
    id 'com.gradle.plugin-publish' version '2.0.0'
    id 'com.gradleup.shadow' version '9.2.2'
    id 'com.github.ben-manes.versions' version '0.53.0'
}

develocity {
    buildScan {
        termsOfUseUrl   = 'https://gradle.com/help/legal-terms-of-use'
        termsOfUseAgree = 'yes'
    }
}

group 'org.javamodularity'
version '2.0.1-SNAPSHOT'

java {
    sourceCompatibility = JavaVersion.VERSION_11
    targetCompatibility = JavaVersion.VERSION_11
}

repositories {
    mavenCentral()
}

configurations {
    plugin.description = "Plugin's dependencies"
    compile.extendsFrom plugin
}

def jUnitVersion = '6.0.0'

dependencies {
    implementation gradleApi()
    implementation 'org.jooq:joor:0.9.15'
    plugin 'com.github.javaparser:javaparser-symbol-solver-core:3.27.1'

    testImplementation gradleTestKit()
    testImplementation 'com.google.guava:guava-base:r03'
    testImplementation 'com.google.guava:guava-io:r03'
    testImplementation "org.junit.jupiter:junit-jupiter-api:$jUnitVersion"
    testImplementation "org.junit.jupiter:junit-jupiter-params:$jUnitVersion"
    testImplementation "org.junit.jupiter:junit-jupiter-engine:$jUnitVersion"
    testImplementation 'org.junit-pioneer:junit-pioneer:2.3.0'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher' // required when testing in Eclipse
}

shadowJar {
    configurations = [project.configurations.plugin]
    archiveClassifier = null
    dependencies {
        include(dependency('com.github.javaparser:javaparser-symbol-solver-core'))
        include(dependency('com.github.javaparser:javaparser-symbol-solver-logic'))
        include(dependency('com.github.javaparser:javaparser-symbol-solver-model'))
        include(dependency('com.github.javaparser:javaparser-core'))
    }
    relocate 'com.github.javaparser', 'org.javamodularity.moduleplugin.shadow.javaparser'
}

jar.enabled = false
jar.dependsOn shadowJar

processResources.duplicatesStrategy = DuplicatesStrategy.EXCLUDE

configurations {
    [apiElements, runtimeElements].each {
        it.outgoing.artifacts.removeIf { it.buildDependencies.getDependencies(null).contains(jar) }
        it.outgoing.artifact(shadowJar)
    }
}

test {
    useJUnitPlatform()

    testLogging {
        events 'PASSED', 'FAILED', 'SKIPPED', 'STANDARD_OUT'
        stackTraceFilters = []
    }
}

tasks.register('createClasspathManifest') {
    var outputDir = layout.buildDirectory.dir(name)

    inputs.files sourceSets.main.runtimeClasspath
    outputs.dir outputDir

    doLast {
        File dir = outputDir.get().asFile
        dir.mkdirs()
        file("$dir/plugin-classpath.txt").text = sourceSets.main.runtimeClasspath.join('\n')
    }
}

// Add the classpath file to the test runtime classpath
dependencies {
    testRuntimeOnly files(createClasspathManifest)
}

gradlePlugin {
    plugins {
        website = 'https://github.com/java9-modularity/gradle-modules-plugin'
        vcsUrl = 'https://github.com/java9-modularity/gradle-modules-plugin'
        modulesPlugin {
            id = 'org.javamodularity.moduleplugin'
            displayName = 'Java Modularity Gradle Plugin'
            description = 'Plugin that makes it easy to work with the Java Platform Module System'
            implementationClass = 'org.javamodularity.moduleplugin.ModuleSystemPlugin'
            tags = ['java', 'modules', 'jpms', 'modularity']
        }
    }
}

publishing { // used for publishing to local maven repository
    publications {
        create("pluginMaven", MavenPublication) {
            groupId = 'org.javamodularity'
            artifactId = 'moduleplugin'
            version = project.version
        }
    }
}

defaultTasks("check")